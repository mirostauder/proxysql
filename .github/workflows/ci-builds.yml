name: CI-builds

on:
  workflow_dispatch:
  workflow_call:

permissions: write-all

env:
  LOCK: CI_BUILDS_${{ github.sha }}

jobs:

#  lock:
#    runs-on: ubuntu-22.04
#    env:
#      GH_TOKEN: ${{ secrets.gh_token }}
#
#    steps:
#
#    - name: Concurency locking
#      run: |
#        # lock fast
#        echo "Setting lock '${LOCK^^}' to '${{ github.workflow }}'"
#        gh variable -R ${{ github.repository }} list | grep -i ${LOCK} >/dev/null || gh variable -R ${{ github.repository }} set ${LOCK} -b '${{ github.workflow }}' >/dev/null
#
#        # wait for unlock
#        sleep 5
#        PROBE="$(gh variable -R ${{ github.repository }} list | grep -i ${LOCK} || echo '')"
#        if [[ ! ${PROBE} =~ ${{ github.workflow }} ]]; then
#          while [[ ! -z ${PROBE} ]]; do
#            echo "Wating for unlock '${LOCK^^}' by '$(echo ${PROBE} | awk '{ print $2 }')' ..."
#            sleep 15
#            PROBE="$(gh variable -R ${{ github.repository }} list | grep -i ${LOCK} || echo '')"
#          done
#        else
#          echo "Aquired lock '${LOCK^^}' by '${{ github.workflow }}'"
#        fi

  builds:
    runs-on: ubuntu-22.04
#    needs: [ lock ]
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - dist: 'centos7'
#            type: ''
          - dist: 'debian10'
            type: ''
          # debian11 is needed for 3p testing
#          - dist: 'debian11'
#            type: ''
          # debian12 is needed for 3p testing
#          - dist: 'debian12'
#            type: ''
#          - dist: 'opensuse15'
#            type: '-clang'
#          - dist: 'ubuntu16'
#            type: ''
#          - dist: 'ubuntu22'
#            type: '-tap'
#          - dist: 'ubuntu22'
#            type: '-tap-asan'
#          - dist: 'ubuntu22'
#            type: '-clang'
#          - dist: 'ubuntu22'
#            type: '-clang-tap'
#          - dist: 'ubuntu22'
#            type: '-clang-tap-asan'
    env:
#      BLDCACHE: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}
      BLDCACHE: ${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}

    steps:

    - name: Cache check
      id: cache-check
      uses: actions/cache/restore@v4
      with:
        key: ${{ env.BLDCACHE }}_bin
        lookup-only: true
        path: |
          proxysql/binaries/

    - name: Checkout repository
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
#        repository: '${{ github.repository }}'
#        ref: 'v2.x'
        fetch-depth: 0
        path: 'proxysql'

#    - name: Patch TAP-tests
#      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
#      run: |
#         apply patches
#        for PATCH in $(cd jenkins-build-scripts/test-scripts/patches && find . -type f); do
#          if [[ $PATCH =~ \.patch ]]; then
#            patch --verbose proxysql/${PATCH%.patch} jenkins-build-scripts/test-scripts/patches/${PATCH} || true
#          elif [[ ! -f jenkins-build-scripts/test-scripts/patches/${PATCH#./}.patch ]]; then
#            cp -v jenkins-build-scripts/test-scripts/patches/${PATCH#./} proxysql/${PATCH#./} || true
#          fi
#        done
#        ls -l proxysql/test/tap

    - name: Build
      id: build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        cd proxysql/
        sed -i 's/docker-compose/docker compose/g' Makefile
        git fetch --tags --force
        mkdir ci_build_log
        if [[ "${{ matrix.type }}" =~ "-asan" ]]; then
          sed -i "/command/i \      - WITHASAN=1" docker-compose.yml
          sed -i "/command/i \      - TEST_WITHASAN=1" docker-compose.yml
        fi
        if [[ "${{ matrix.type }}" =~ "-tap" ]]; then
          # prebuild dependencies without debug
          #sed -i "/command/c \    command: bash -l -c '${ASAN} cd /opt/proxysql && make -j$(nproc) build_deps_clickhouse'" docker-compose.yml
          #make ${{ matrix.dist }} | tee ci_build_log/build-deps.log
          # build tap tests
          sed -i "s/^build_tap_test_debug: build_src_debug$/build_tap_test_debug: build_src_debug_clickhouse/" Makefile
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && ${ASAN} make -j$(nproc) build_tap_test_debug'" docker-compose.yml
          make ${{ matrix.dist }}-dbg | tee ci_build_log/build-tap.log
          
          # create matrix of all test folders containing *-t
          echo "[ "$(find test/tap/ -name '*-t' | xargs -n1 dirname | uniq | sed 's|test/tap/||' | xargs -I{} -n1 echo -n "'{}', ")"]" > tap-matrix.json
          find test/tap/ -name *-t | xargs -n1 dirname | uniq  > tap-matrix.txt
          echo "===================="
          echo ">>>tap-matrix.txt<<<"
          cat tap-matrix.txt
          echo "===================="
          # create matrixes of all tests
          for TESTS in test/tap/tests*; do
            echo "[ "$(find -L $TESTS -type f -name '*-t' -executable -printf "'%f', ")" ]" > tap-matrix-${TESTS##*/}.json
            find -L $TESTS -type f -name '*-t' -executable -printf "%f\n" > tap-matrix-${TESTS##*/}.txt
            echo "===================="
            echo ">>>${TESTS##*/}<<<"
            cat tap-matrix-${TESTS##*/}.txt
            echo "===================="
          done
          
        elif [[ "${{ matrix.type }}" =~ "-test" ]]; then
          TYPE=${{ matrix.type }}
          # build TYPE
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) ${TYPE#-}'" docker-compose.yml
          make ${{ matrix.dist }} | tee ci_build_log/build.log
        else
          make ${{ matrix.dist }}${{ matrix.type }} | tee ci_build_log/build.log
        fi

    - name: Check build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        for LOG in proxysql/ci_build_log/build*.log ; do
          grep 'exited with code 0' ${LOG} || exit 1
        done

    - name: Cache save bin
      id: cache-save-bin
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        key: ${{ env.BLDCACHE }}_bin
        path: |
          proxysql/binaries/

    - name: Cache save src
      id: cache-save-src
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && contains(matrix.type,'-tap') }}
      uses: actions/cache/save@v4
      with:
        key: ${{ env.BLDCACHE }}_src
        path: |
          proxysql/src/

    - name: Cache save test
      id: cache-save-test
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && contains(matrix.type,'-tap') }}
      uses: actions/cache/save@v4
      with:
        key: ${{ env.BLDCACHE }}_test
        path: |
          proxysql/test/

    - name: Cache save matrix
      id: cache-save-matrix
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && contains(matrix.type,'-tap') }}
      uses: actions/cache/save@v4
      with:
        key: ${{ env.BLDCACHE }}_matrix
        path: |
          proxysql/tap-matrix*

    - name: Archive artifacts
      if: ${{ failure() && !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ci-builds-${{ github.sha }}-run#${{ github.run_number }}-${{ matrix.dist }}${{ matrix.type }}
        path: |
          proxysql/

#  unlock:
#    runs-on: ubuntu-22.04
#    if: ${{ always() }}
#    needs: [ builds ]
#    env:
#      GH_TOKEN: ${{ secrets.gh_token }}
#
#    steps:
#    
#    - name: Concurency unlock
#      run: |
#        # delete lock
#        PROBE="$(gh variable -R ${{ github.repository }} list | grep -i ${LOCK} || echo '')"
#        if [[ ${PROBE} =~ ${{ github.workflow }} ]]; then
#          echo "Releasing lock '${LOCK^^}' by '$(echo ${PROBE} | awk '{ print $2 }')'"
#          gh variable -R ${{ github.repository }} delete ${LOCK} || true
#        elif [[ ! -z ${PROBE} ]]; then
#          echo "Lock raced '${LOCK^^}' by '$(echo ${PROBE} | awk '{ print $2 }')'"
#        #  exit -1
#        else
#          echo "Not locked '${LOCK^^}'"
#        fi

